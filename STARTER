# Variables
variable "bucket_name" {}
variable "function_name" {}
variable "commit_id" {}
variable "region" {
  default = "us-east-1"
}

variable "handler" {
  default = "lambda_function.lambda_handler"
}
variable "runtime" {
  default = "python3.7"
}
# Env Vars
variable "env_var" {}



# Data
data "aws_caller_identity" "current" {}

# Resources
resource "aws_lambda_function" "function" {
  function_name = var.function_name

  s3_bucket = var.bucket_name
  s3_key    = "${var.function_name}/${var.commit_id}.zip"

  publish = false
  memory_size = 128
  timeout = 30
  reserved_concurrent_executions = -1

  handler = var.handler
  runtime = var.runtime

  role = aws_iam_role.lambda_exec.arn

  environment {
    variables = {
      env_var = var.env_var
    }
  }
}
resource "aws_iam_role" "lambda_exec" {
  name = "${var.function_name}_role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}
# See also the following AWS managed policy: AWSLambdaBasicExecutionRole
resource "aws_iam_policy" "lambda_logging" {
  name = "${var.function_name}_policy"
  path = "/"
  description = "IAM policy for logging from a lambda"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*",
      "Effect": "Allow"
    }   
  ]
}
EOF
}
resource "aws_iam_role_policy_attachment" "lambda_logs" {
  role = "${aws_iam_role.lambda_exec.name}"
  policy_arn = "${aws_iam_policy.lambda_logging.arn}"
}
